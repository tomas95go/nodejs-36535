Desafío 8: Comandos hechos en Mongo Shell.
Alumno: González Oviedo Tomás.

1. Crear una base de datos llamada "ecommerce":
use ecommerce.

2. Crear dos colecciones: mensajes y productos.

db.messages.insertOne({
    id: ObjectId(),
    message: "A la grande le puse cuca",
    date: new Date().toLocaleString("es-AR"),
    email: "homero@springfield.com"
});

db.products.insertOne({
    id: ObjectId(),
    name: "Get Rich Or Die Tryin'",
    price: 5000,
    img: "https://i.discogs.com/AMVipM-vD1NU3NhvRZkzNkzCup5PakFAJJqVUj3UDXU/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI1ODg4/Mi0xNDI1NzA3OTQw/LTg4MDUuanBlZw.jpeg",
    artist: "50 Cent",
    release_year: 2003
});

3. Agregar 10 documentos con valores distintos a las colecciones mensajes y productos.

db.messages.insertOne({
    id: ObjectId(),
    message: "A la grande le puse cuca1",
    date: new Date().toLocaleString("es-AR"),
    email: "homero@springfield.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "A la grande le puse cuca2",
    date: new Date().toLocaleString("es-AR"),
    email: "homero@springfield.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "A la grande le puse cuca3",
    date: new Date().toLocaleString("es-AR"),
    email: "homero@springfield.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "A la grande le puse cuca4",
    date: new Date().toLocaleString("es-AR"),
    email: "homero@springfield.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "A la grande le puse cuca5",
    date: new Date().toLocaleString("es-AR"),
    email: "homero@springfield.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "A la grande le puse cuca6",
    date: new Date().toLocaleString("es-AR"),
    email: "homero@springfield.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "A la grande le puse cuca7",
    date: new Date().toLocaleString("es-AR"),
    email: "homero@springfield.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "A la grande le puse cuca8",
    date: new Date().toLocaleString("es-AR"),
    email: "homero@springfield.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "A la grande le puse cuca9",
    date: new Date().toLocaleString("es-AR"),
    email: "homero@springfield.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "A la grande le puse cuca10",
    date: new Date().toLocaleString("es-AR"),
    email: "homero@springfield.com"
});

db.products.insertOne({
    id: ObjectId(),
    name: "Get Rich Or Die Tryin'1",
    price: 4010,
    img: "https://i.discogs.com/AMVipM-vD1NU3NhvRZkzNkzCup5PakFAJJqVUj3UDXU/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI1ODg4/Mi0xNDI1NzA3OTQw/LTg4MDUuanBlZw.jpeg",
    artist: "50 Cent",
    release_year: 2003
});

db.products.insertOne({
    id: ObjectId(),
    name: "Get Rich Or Die Tryin'2",
    price: 900,
    img: "https://i.discogs.com/AMVipM-vD1NU3NhvRZkzNkzCup5PakFAJJqVUj3UDXU/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI1ODg4/Mi0xNDI1NzA3OTQw/LTg4MDUuanBlZw.jpeg",
    artist: "50 Cent",
    release_year: 2003
});

db.products.insertOne({
    id: ObjectId(),
    name: "Get Rich Or Die Tryin'3",
    price: 2000,
    img: "https://i.discogs.com/AMVipM-vD1NU3NhvRZkzNkzCup5PakFAJJqVUj3UDXU/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI1ODg4/Mi0xNDI1NzA3OTQw/LTg4MDUuanBlZw.jpeg",
    artist: "50 Cent",
    release_year: 2003
});

db.products.insertOne({
    id: ObjectId(),
    name: "Get Rich Or Die Tryin'4",
    price: 2500,
    img: "https://i.discogs.com/AMVipM-vD1NU3NhvRZkzNkzCup5PakFAJJqVUj3UDXU/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI1ODg4/Mi0xNDI1NzA3OTQw/LTg4MDUuanBlZw.jpeg",
    artist: "50 Cent",
    release_year: 2003
});

db.products.insertOne({
    id: ObjectId(),
    name: "Get Rich Or Die Tryin'5",
    price: 3000,
    img: "https://i.discogs.com/AMVipM-vD1NU3NhvRZkzNkzCup5PakFAJJqVUj3UDXU/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI1ODg4/Mi0xNDI1NzA3OTQw/LTg4MDUuanBlZw.jpeg",
    artist: "50 Cent",
    release_year: 2003
});

db.products.insertOne({
    id: ObjectId(),
    name: "Get Rich Or Die Tryin'6",
    price: 5000,
    img: "https://i.discogs.com/AMVipM-vD1NU3NhvRZkzNkzCup5PakFAJJqVUj3UDXU/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI1ODg4/Mi0xNDI1NzA3OTQw/LTg4MDUuanBlZw.jpeg",
    artist: "50 Cent",
    release_year: 2003
});

db.products.insertOne({
    id: ObjectId(),
    name: "Get Rich Or Die Tryin'7",
    price: 4000,
    img: "https://i.discogs.com/AMVipM-vD1NU3NhvRZkzNkzCup5PakFAJJqVUj3UDXU/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI1ODg4/Mi0xNDI1NzA3OTQw/LTg4MDUuanBlZw.jpeg",
    artist: "50 Cent",
    release_year: 2003
});

db.products.insertOne({
    id: ObjectId(),
    name: "Get Rich Or Die Tryin'8",
    price: 290,
    img: "https://i.discogs.com/AMVipM-vD1NU3NhvRZkzNkzCup5PakFAJJqVUj3UDXU/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI1ODg4/Mi0xNDI1NzA3OTQw/LTg4MDUuanBlZw.jpeg",
    artist: "50 Cent",
    release_year: 2003
});

db.products.insertOne({
    id: ObjectId(),
    name: "Get Rich Or Die Tryin'9",
    price: 1250,
    img: "https://i.discogs.com/AMVipM-vD1NU3NhvRZkzNkzCup5PakFAJJqVUj3UDXU/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI1ODg4/Mi0xNDI1NzA3OTQw/LTg4MDUuanBlZw.jpeg",
    artist: "50 Cent",
    release_year: 2003
});

db.products.insertOne({
    id: ObjectId(),
    name: "Get Rich Or Die Tryin'10",
    price: 270,
    img: "https://i.discogs.com/AMVipM-vD1NU3NhvRZkzNkzCup5PakFAJJqVUj3UDXU/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI1ODg4/Mi0xNDI1NzA3OTQw/LTg4MDUuanBlZw.jpeg",
    artist: "50 Cent",
    release_year: 2003
});

4. Listar todos los documentos en cada colección.
db.messages.find();
db.products.find();

5.Mostrar la cantidad de documentos almacenados en cada una de ellas.
db.messages.countDocuments();
db.products.countDocuments();

6.Realizar un CRUD sobre la colección de productos
6.1 Agregar un producto más en la colección de productos:

db.products.insertOne({
    id: ObjectId(),
    name: "Get Rich Or Die Tryin'11",
    price: 250,
    img: "https://i.discogs.com/AMVipM-vD1NU3NhvRZkzNkzCup5PakFAJJqVUj3UDXU/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI1ODg4/Mi0xNDI1NzA3OTQw/LTg4MDUuanBlZw.jpeg",
    artist: "50 Cent",
    release_year: 2003
});

6.2 Realizar una consulta por nombre de producto específico:

db.products.findOne({name: "Get Rich Or Die Tryin'1"});

6.3 Listar los productos con precio menor a 1000 pesos.

db.products.find( { price: { $lt: 1000 } } );

6.4 Listar los productos con precio entre los 1000 a 3000 pesos.

db.products.find( { $and: [ { price: { $gte: 1000 } }, { price: { $lte: 3000 } } ] } );

6.5 Listar los productos con precio mayor a 3000 pesos.

db.products.find( { price: { $gt: 3000 } } );

6.6 Realizar una consulta que traiga sólo el nombre del tercer producto más barato.

products = db.products.find({}, {_id: 0, id: 0, img: 0, artist: 0, release_year: 0}).sort({price: 1}).toArray();
products[2];

6.7 Hacer una actualización sobre todos los productos, agregando el campo stock a todos ellos con un valor de 100.

db.products.updateMany({},{$set: { stock: 100 }});

6.8 Cambiar el stock a cero de los productos con precios mayores a 4000 pesos.

db.products.updateMany({price: {$gte: 4000 }},{$set: { stock: 0 }});

6.9 Borrar los productos con precio menor a 1000 pesos.

db.products.deleteMany({price: {$lt: 1000}});

6.10 Crear un usuario 'pepe' clave: 'asd456' que sólo pueda leer la base de datos ecommerce. Verificar que pepe no pueda cambiar la información.

db.createUser({user: "pepe",pwd: "asd456", roles: [{role:"read", db: "ecommerce"}]});

Prueba: db.auth("pepe","asd456"); { ok: 1 };
db.products.find();
db.products.deleteMany({price: {$lt: 10000}})
MongoServerError: not authorized on ecommerce to execute command { delete: "products", deletes: [ { q: { price: { $lt: 10000 } }, limit: 0 } ], ordered: true, lsid: { id: UUID("fb4389ef-cf38-4a49-915e-38785c6426ed") }, $db: "ecommerce" };
